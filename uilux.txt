local luxury_table = loadstring(game:HttpGet("https://raw.githubusercontent.com/SixZensED/Scripts/main/Luxury%20V2/Libraryv2.lua"))()

print("--[[Get UI]]--")

print("--[[Loaded UI]]--")

local LuxuryHubLib = luxury_table.create()

local CheckMark = "✅"
local XMark = "❌"

local page1 = LuxuryHubLib.tab({
	Logo = tostring("16796144919"),
	Title = "Main",
	Desc = "Farm Main Tabs",
})

local main = page1.page({
	Type = 1,
	Title = "Status"
})	

local DoingS = main.Label({
	Title = "Trash Hub V2"
})

local main1 = page1.page({
	Type = 1,
	Title = "Info"
})	

main1.Label({
	Title = "World : ".. (function() if OldWorld then return 1 elseif NewWorld then return 2 elseif ThreeWorld then return 3 end end)()
})

main1.Label({
	Title = "Name : "..LocalPlayer.Name
})

local LevelS = main1.Label({
	Title = "Level : "..game:GetService("Players").LocalPlayer.Data:FindFirstChild("Level").Value
})
local FragmentsS = main1.Label({
	Title = "Fragments : "..game:GetService("Players").LocalPlayer.Data:FindFirstChild("Fragments").Value
})
local RaceS = main1.Label({
	Title = "Race : "..game:GetService("Players").LocalPlayer.Data:FindFirstChild("Race").Value
})
local EvoRaceS = main1.Label({
	Title = "Evo Race : "..(function()if inmyself("Awakening")then return 4 elseif Com("F_","Wenlocktoad","1")==-2 then return 3 elseif Com("F_","Alchemist","1")==-2 then return 2 else return 1 end end)() .. "/4"
})
local FruitS = main1.Label({
	Title = "Devil Fruit : "..game:GetService("Players").LocalPlayer.Data:FindFirstChild("DevilFruit").Value
})
local FruitMasS = main1.Label({
	Title = "Fruit Mastery : "..game:GetService("Players")["LocalPlayer"]:WaitForChild("Data").DevilFruit.Value
})
local AwakenS = main1.Label({
	Title = "Awaken : "..GetAwakened()
})
--
local main2 = page1.page({
	Type = 1,
	Title = "Quest Status"
})	

local SaberQuestS = main2.Label({
	Title = "Saber Quest : "..XMark
})

local QesutSea2S = main2.Label({
	Title = "Sea 2 Quest : "..(function() if not Com("F_","DressrosaQuestProgress", "Dressrosa") then return XMark end if tonumber(Com("F_","DressrosaQuestProgress", "Dressrosa")) == 0 then return CheckMark else return XMark end end)()
})
local BartiloQuestS = main2.Label({
	Title = "Bartilo Quest : "..(function() if not Com("F_","BartiloQuestProgress", "Bartilo") then return XMark end if tonumber(Com("F_","BartiloQuestProgress", "Bartilo")) == 3 then return CheckMark else return XMark end end)()
})
local QesutSea3S = main2.Label({
	Title = "Sea 3 Quest : "..(function() if not Com("F_","ZQuestProgress", "Check") then return XMark end if tonumber(Com("F_","ZQuestProgress", "Check")) == 1 then return CheckMark else return XMark end end)()
})
--
local main3 = page1.page({
	Type = 1,
	Title = "Accessory Status"
})	
local DarkCoatS = main3.Label({
	Title = "Dark Coat : "..XMark
})

local HolyCrownS = main3.Label({
	Title = "Holy Crown : "..XMark
})

local PaleScarfS = main3.Label({
	Title = "Pale Scarf : "..XMark
})

local ValkyrieHelmetS = main3.Label({
	Title = "Valkyrie Helmet : "..XMark
})
--
local main4 = page1.page({
	Type = 2,
	Title = "Fighting Status"
})	

local GodhumS = main4.Label({
	Title = "Godhuman : "..XMark
})
local SuphumS = main4.Label({
	Title = "Superhuman : "..XMark
})
local SharkmanS = main4.Label({
	Title = "SharkmanKarate : "..XMark
})
local DragonS = main4.Label({
	Title = "DragonTalon : "..XMark
})
local ElectricS = main4.Label({
	Title = "ElectricClaw : "..XMark
})
local DeathS = main4.Label({
	Title = "DeathStep : "..XMark
})
--
local main5 = page1.page({
	Type = 2,
	Title = "Sword Status"
})	

local PoleV1S = main5.Label({
	Title = "Pole V1 : "..XMark
})
local PoleV2S = main5.Label({
	Title = "Pole V2 : "..XMark
})
local RengokuS = main5.Label({
	Title = "Rengoku : "..XMark
})
local ShisuiS = main5.Label({
	Title = "Shisui : "..XMark
})
local SaddiS = main5.Label({
	Title = "Saddi : "..XMark
})
local WandoS = main5.Label({
	Title = "Wando : "..XMark
})
local TTKS = main5.Label({
	Title = "True Triple Katana : "..XMark
})
local YamaS = main5.Label({
	Title = "Yama : "..XMark
})
local TushitaS = main5.Label({
	Title = "Tushita : "..XMark
})
local CanvanderS = main5.Label({
	Title = "Canvander : "..XMark
})
local SPTS = main5.Label({
	Title = "Spikey Trident : "..XMark
})
local DDGS = main5.Label({
	Title = "Dark Dagger : "..XMark
})
local BuddySwS = main5.Label({
	Title = "Buddy Sword : "..XMark
})
local HWSS = main5.Label({
	Title = "Hallow Scythe : "..XMark
})
local CDKS = main5.Label({
	Title = "Cursed Dual Katana : "..XMark
})
--
local main5 = page1.page({
	Type = 2,
	Title = "Gun Status"
})	

local KabuchaS = main5.Label({
	Title = "Kabucha : "..XMark
})
local AcidumRifleS = main5.Label({
	Title = "Acidum Rifle : "..XMark
})
local SPBowS = main5.Label({
	Title = "Serpent Bow : "..XMark
})
local SoulGuitarS = main5.Label({
	Title = "Soul Guitar : "..XMark
})

function RefreshStatus()
	for i,v in pairs(Com("F_","getInventory")) do
		if type(v) == "table" then
			if v.Name == "Saber" and string.find(SaberQuestS:Update().Text,XMark) then
				SaberQuestS:Update().Text = SaberQuestS:Update().Text:gsub(XMark,CheckMark)
			end

			-------------------------------------------------------------------------------------

			if v.Name == "Pole (1st Form)" and string.find(PoleV1S:Update().Text,XMark) then
				PoleV1S:Update().Text = PoleV1S:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Pole (2nd Form)" and string.find(PoleV2S:Update().Text,XMark) then
				PoleV2S:Update().Text = PoleV2S:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Rengoku" and string.find(RengokuS:Update().Text,XMark) then
				RengokuS:Update().Text = RengokuS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Shisui" and string.find(ShisuiS:Update().Text,XMark) then
				ShisuiS:Update().Text = ShisuiS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Saddi" and string.find(SaddiS:Update().Text,XMark) then
				SaddiS:Update().Text = SaddiS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Wando" and string.find(WandoS:Update().Text,XMark) then
				WandoS:Update().Text = WandoS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "True Triple Katana" and string.find(TTKS:Update().Text,XMark) then
				TTKS:Update().Text = TTKS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Yama" and string.find(YamaS:Update().Text,XMark) then
				YamaS:Update().Text = YamaS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Tushita" and string.find(TushitaS:Update().Text,XMark) then
				TushitaS:Update().Text = TushitaS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Canvander" and string.find(CanvanderS:Update().Text,XMark) then
				CanvanderS:Update().Text = CanvanderS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Spikey Trident" and string.find(SPTS:Update().Text,XMark) then
				SPTS:Update().Text = SPTS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Dark Dagger" and string.find(DDGS:Update().Text,XMark) then
				DDGS:Update().Text = DDGS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Hallow Scythe" and string.find(HWSS:Update().Text,XMark) then
				HWSS:Update().Text = HWSS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Buddy Sword" and string.find(BuddySwS:Update().Text,XMark) then
				BuddySwS:Update().Text = BuddySwS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Cursed Dual Katana" and string.find(CDKS:Update().Text,XMark) then
				CDKS:Update().Text = CDKS:Update().Text:gsub(XMark,CheckMark)
			end

			----------------------------------------------------------------------------------------------

			if v.Name == "Kabucha" and string.find(KabuchaS:Update().Text,XMark) then
				KabuchaS:Update().Text = KabuchaS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Acidum Rifle" and string.find(AcidumRifleS:Update().Text,XMark) then
				AcidumRifleS:Update().Text = AcidumRifleS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Serpent Bow" and string.find(SPBowS:Update().Text,XMark) then
				SPBowS:Update().Text = SPBowS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Soul Guitar" and string.find(SoulGuitarS:Update().Text,XMark) then
				SoulGuitarS:Update().Text = SoulGuitarS:Update().Text:gsub(XMark,CheckMark)
			end

			----------------------------------------------------------------------------------------------

			if v.Name == "Dark Coat" and string.find(DarkCoatS:Update().Text,XMark) then
				DarkCoatS:Update().Text = DarkCoatS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Holy Crown" and string.find(HolyCrownS:Update().Text,XMark) then
				HolyCrownS:Update().Text = HolyCrownS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Pale Scarf" and string.find(PaleScarfS:Update().Text,XMark) then
				PaleScarfS:Update().Text = PaleScarfS:Update().Text:gsub(XMark,CheckMark)
			end
			if v.Name == "Valkyrie Helm" and string.find(ValkyrieHelmetS:Update().Text,XMark) then
				ValkyrieHelmetS:Update().Text = ValkyrieHelmetS:Update().Text:gsub(XMark,CheckMark)
			end
		end
	end
	if GodhumanDone and string.find(GodhumS:Update().Text,XMark) then
		GodhumS:Update().Text = GodhumS:Update().Text:gsub(XMark,CheckMark)
	end
	if SuperhumanDone and string.find(SuphumS:Update().Text,XMark) then
		SuphumS:Update().Text = SuphumS:Update().Text:gsub(XMark,CheckMark)
	end
	if SharkmanKarateDone and string.find(SharkmanS:Update().Text,XMark) then
		SharkmanS:Update().Text = SharkmanS:Update().Text:gsub(XMark,CheckMark)
	end
	if DargonTalonDone and string.find(DragonS:Update().Text,XMark) then
		DragonS:Update().Text = DragonS:Update().Text:gsub(XMark,CheckMark)
	end
	if ElectricClawDone and string.find(ElectricS:Update().Text,XMark) then
		ElectricS:Update().Text = ElectricS:Update().Text:gsub(XMark,CheckMark)
	end
	if DeathStepDone and string.find(DeathS:Update().Text,XMark) then
		DeathS:Update().Text = DeathS:Update().Text:gsub(XMark,CheckMark)
	end
	LevelS:Update().Text = "Level : "..game:GetService("Players").LocalPlayer.Data:FindFirstChild("Level").Value
	FragmentsS:Update().Text = "Fragments : "..game:GetService("Players").LocalPlayer.Data:FindFirstChild("Fragments").Value
	RaceS:Update().Text = "Race : "..game:GetService("Players").LocalPlayer.Data:FindFirstChild("Race").Value
	EvoRaceS:Update().Text = "Evo Race : "..(function() if Com("F_","Wenlocktoad","1") == -2 then return 3 elseif Com("F_","Alchemist","1") == -2 then return 2 else return 1 end end)() .. "/3"
	FruitMasS:Update().Text  = "Fruit Mas : "..game:GetService("Players")["LocalPlayer"]:WaitForChild("Data").DevilFruit.Value
	FruitS:Update().Text = "Fruit : "..game:GetService("Players").LocalPlayer.Data:FindFirstChild("DevilFruit").Value
	AwakenS:Update().Text = "Awaken : "..GetAwakened()
	BartiloQuestS:Update().Text = "Bartilo Quest : "..(function() if not Com("F_","BartiloQuestProgress", "Bartilo") then return XMark end if tonumber(Com("F_","BartiloQuestProgress", "Bartilo")) == 3 then return CheckMark else return XMark end end)()	
end

	function ShowDoingStatus(text)
		task.spawn(function()
			if NoLoopDuplicate1 == false then
				NoLoopDuplicate1 = true
				if not string.find(DoingS:Update().Text,text) then
					local Text = "Doing Status : "..text
					for i = 1, #Text, 1 do
						DoingS:Update().Text = string.sub(Text, 1, i)
						task.wait(0.025)
					end
				end
				NoLoopDuplicate1 = false
			end
		end)
	end
	
pcall(RefreshStatus)

task.spawn(function()
	while task.wait() do 
		if game.Players.LocalPlayer:FindFirstChild("Backpack") and game.Players.LocalPlayer.Character then
			pcall(RefreshStatus)
			task.wait(math.random(3,10))
		end
	end
end)

function havemob(name)
	return game.Workspace.Enemies:FindFirstChild(name) or game.ReplicatedStorage:FindFirstChild(name)
end

local KaiTunTool = {}

function KaiTunTool:WebHookSend(WebHookUrl)
	local Embeds = {{
		title = ":sushi: **Luxury Webhooks Status**",
		color = tonumber(0xffffff),
		fields = {
			{
				name = "User Info",
				value = string.format("Name: %s\nBeli: %s\nFragments: %s\nWorld: %s\nRace: %s\nBounty/Honor: %s",
					tostring(game.Players.LocalPlayer.Name),
					Abbreviate(game:GetService("Players").LocalPlayer.Data:FindFirstChild("Beli").Value),
					Abbreviate(game:GetService("Players").LocalPlayer.Data:FindFirstChild("Fragments").Value),
					(function()
						if OldWorld then
							return 1
						elseif NewWorld then
							return 2
						elseif ThreeWorld then
							return 3
						end
					end)(),
					game:GetService("Players").LocalPlayer.Data:FindFirstChild("Race").Value,
					Abbreviate(game:GetService("Players").LocalPlayer.leaderstats["Bounty/Honor"].Value)
				),
				inline = true
			},
			{
				name = "ㅤ",
				value = tostring("ㅤ"),
				inline = true
			},
			{
				name = "Fruit Info",
				value = string.format("Fruit: %s\nFruit Mastery: %s\nFruit Awake: %s",
					game:GetService("Players").LocalPlayer.Data:FindFirstChild("DevilFruit").Value,
					(function()
						local a = inmyself(tostring(game:GetService("Players")["LocalPlayer"]:WaitForChild("Data").DevilFruit.Value))
						if a then
							return a:WaitForChild("Level").Value
						end
					end)(),
					GetAwakened()
				),
				inline = true
			},
			{
				name = "Melee",
				value = "```yml\n" .. GetMeleeText(true, "\n") .. "```",
				inline = true
			},
			{
				name = "Fruit Inventory",
				value = "```diff\n" .. table.concat((function()
					local a = {}
					for b, c in pairs(Com("F_", "getInventory")) do
						if c.Type == "Blox Fruit" then
							table.insert(a, (function(v)
								if v.Rarity >= 4 then
									return "- "
								elseif v.Rarity >= 3 then
									return "+ "
								end
								return "* "
							end)(c) .. c.Name)
						end
					end
					return a
				end)(), "\n") .. "```",
				inline = true
			},
			{
				name = "Item",
				value = "```diff\n" .. table.concat((function()
					local a = {}
					for b, c in pairs(Com("F_", "getInventory")) do
						if c.Type ~= "Blox Fruit" and c.Type ~= "Material" then
							table.insert(a, (function(v)
								if v.Rarity >= 4 then
									return "- "
								elseif v.Rarity >= 3 then
									return "+ "
								end
								return "* "
							end)(c) .. c.Name)
						end
					end
					return a
				end)(), "\n") .. "```",
				inline = true
			},
			{
				name = "ㅤ",
				value = tostring("ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ"),
				inline = false
			},
		}
	}}

	local Message
	if TagUser and _G.DiscordId then
		Message = {
			username = "Luxury KaiTan Log",
			avatar_url = "https://cdn.discordapp.com/avatars/953286441935458334/c92613b3beb9db7b4f5a8a21e9f39b13.png?width=473&height=473",
			content = ("<@!%s>"):format(_G.DiscordId),
			embeds = Embeds,
		}
	else
		Message = {
			username = "Luxury KaiTan Log",
			avatar_url = "https://cdn.discordapp.com/avatars/953286441935458334/c92613b3beb9db7b4f5a8a21e9f39b13.png?width=473&height=473",
			embeds = Embeds,
		}
	end

	local DataCallBack = http_request({
		Url = WebHookUrl,
		Method = 'POST',
		Headers = {
			["Content-Type"] = "application/json"
		},
		Body = game:GetService("HttpService"):JSONEncode(Message)
	})
	return DataCallBack
end

function CheckMobRainBowHaki()
	local HorEvent = Com("F_","HornedMan")
	return ( (tostring(HorEvent):find("Stone") and havemob("Stone [Lv. 1550] [Boss]")) or 
		(tostring(HorEvent):find("Island Empress") and havemob("Island Empress [Lv. 1675] [Boss]")) or 
		(tostring(HorEvent):find("Kilo Admiral") and havemob("Kilo Admiral [Lv. 1750] [Boss]]")) or 
		(tostring(HorEvent):find("Captain Elephant") and havemob("Captain Elephant [Lv. 1875] [Boss]")) or 
		(tostring(HorEvent):find("Beautiful Pirate") and havemob("Beautiful Pirate [Lv. 1950] [Boss]")) )
end

pcall(function()
	for i,v in pairs(game.Workspace:GetDescendants()) do
		if v.Name == "Lava" then   
			v:Destroy()
		end
	end
end)

spawn(function()
	while task.wait() do
		TeleportType = math.random(1,5)
		task.wait(0.3)
	end
end)

spawn(function()
	while task.wait() do 
		TypeSeabeast = 0
		task.wait(1)
		TypeSeabeast = 1
		task.wait(1)
	end
end)

LPH_NO_VIRTUALIZE(function()
	local gg = getrawmetatable(game)
	local old = gg.__index
	setreadonly(gg,false)
	gg.__index = newcclosure(function(...)
		local args = {...}
		if StartKaiTun then
			if SpamSkillSea then
				if args[1] == MouseCheckReq and args[2] == "Hit" and not checkcaller() then
					return CFrame.new(PosKillSea)
				end
			elseif UseSkillMasteryDevilFruit then
				if args[1] == MouseCheckReq and args[2] == "Hit" and not checkcaller() then
					return CFrame.new(PositionSkillMasteryDevilFruit)
				end
			elseif OldWorld and args[1] == MouseCheckReq and args[2] == "Hit" and not checkcaller() and inmyself('Slingshot') and UsefastattackPlayers == false and DoingS:Update().Text == "Doing Status : Skip Farm Level" then
				return CFrame.new(PositionSling)
			end
		end
		return old(unpack(args))
	end)

end)()

local Remote_GetFruits = Com("F_","GetFruits");
Table_DevilFruitSniper = {}
for i,v in pairs(Remote_GetFruits) do
	table.insert(Table_DevilFruitSniper,v.Name)
end

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	task.wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

local NoclipNotDup = tostring(math.random(10000000,99999999))
local fenv = getfenv()
local shp = fenv.sethiddenproperty or fenv.set_hidden_property or fenv.set_hidden_prop or fenv.sethiddenprop
spawn(LPH_NO_VIRTUALIZE(function()
	game:GetService("RunService").Stepped:Connect(function()
		local HumNoid = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
		local HumNoidRoot = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")

		if setscriptable then
			setscriptable(game.Players.LocalPlayer, "SimulationRadius", true)
		end
		if shp then
			shp(game.Players.LocalPlayer, "SimulationRadius", math.huge)
		end
		if StartKaiTun and not AntiSit then
			for i ,v in pairs(game:GetService("ReplicatedStorage"):GetChildren()) do 
				if v:IsA("Model") and (v:GetModelCFrame().Position - HumNoidRoot.Position).Magnitude <= 500 then 
					v.Parent = game:GetService("Workspace").Enemies
				end
			end
			if HumNoid:GetState() == Enum.HumanoidStateType.Seated or HumNoid.Health <= 0 then 
				HumNoid.Jump = true
				HumNoid.Sit = false
				if HumNoidRoot:FindFirstChild("NoClip"..NoclipNotDup) then 
					HumNoidRoot:FindFirstChild("NoClip"..NoclipNotDup):Destroy()
				end
			end
			if HumNoid.Sit == false and HumNoid.Health > 0 then
				for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
					if v:IsA("BasePart") then
						v.CanCollide = false
					end
				end
			else
				HumNoid.Sit = false
			end
			if not HumNoidRoot:FindFirstChild("NoClip"..NoclipNotDup) and HumNoid.Sit == false then
				local bv = Instance.new("BodyVelocity")
				bv.Parent = HumNoidRoot
				bv.Name = "NoClip"..NoclipNotDup
				bv.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
				bv.Velocity = Vector3.new(0,0,0)
			end
		else
			if HumNoidRoot:FindFirstChild("NoClip"..NoclipNotDup) then 
				HumNoidRoot:FindFirstChild("NoClip"..NoclipNotDup):Destroy()
			end
		end
	end)
end))

LoadingScriptSuccess = true
print("Loading Script Success")